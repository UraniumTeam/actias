if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    set(ACTIAS_COMPILER_CLANG ON)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(ACTIAS_COMPILER_GCC ON)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(ACTIAS_COMPILER_MSVC ON)
endif ()

if (WIN32)
    set(ACTIAS_WINDOWS ON)
endif ()

if(CMAKE_SIZEOF_VOID_P EQUAL 8)
    set(ACTIAS_64_BIT ON)
elseif(CMAKE_SIZEOF_VOID_P EQUAL 4)
    set(ACTIAS_32_BIT ON)
endif()

set(CMAKE_DEBUG_POSTFIX "")
set(CMAKE_SHARED_LIBRARY_PREFIX "")

if (ACTIAS_COMPILER_MSVC)
    add_compile_definitions(_CRT_SECURE_NO_WARNINGS)
    add_compile_definitions(_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
    add_compile_definitions(_ENABLE_EXTENDED_ALIGNED_STORAGE)
    set(CMAKE_USE_WIN32_THREADS_INIT ON)
endif ()

option(ACTIAS_USE_SSE3 ON)
option(ACTIAS_USE_SSE41 ON)
option(ACTIAS_USE_AVX2 ON)

if (ACTIAS_USE_SSE41)
    if (NOT ACTIAS_USE_SSE3)
        message(WARNING "SSE4.1 instructions are enabled, but SSE3 are not")
        set(ACTIAS_USE_SSE3 ON)
    endif ()
endif ()

function(actias_enable_simd_for_target SIMD_TARGET)
    if (ACTIAS_USE_SSE3)
        target_compile_definitions(${SIMD_TARGET} PUBLIC ACTIAS_SSE3_SUPPORTED=1)
    endif ()
    if (ACTIAS_USE_SSE41)
        target_compile_definitions(${SIMD_TARGET} PUBLIC ACTIAS_SSE41_SUPPORTED=1)
    endif ()
    if (ACTIAS_USE_AVX2)
        target_compile_definitions(${SIMD_TARGET} PUBLIC ACTIAS_AVX2_SUPPORTED=1)
    endif ()

    if (ACTIAS_USE_SSE41 AND NOT ACTIAS_COMPILER_MSVC)
        target_compile_options(${SIMD_TARGET} PUBLIC -msse4.1)
    endif ()
    if (ACTIAS_USE_AVX2 AND NOT ACTIAS_COMPILER_MSVC)
        target_compile_options(${SIMD_TARGET} PUBLIC -mavx -mavx2)
    endif ()
endfunction()

function(actias_configure_target TARGET)
	if (ACTIAS_64_BIT)
        target_compile_definitions(${TARGET} PUBLIC ACTIAS_ARCH_64_BIT=1)
	elseif (ACTIAS_32_BIT)
        target_compile_definitions(${TARGET} PUBLIC ACTIAS_ARCH_32_BIT=1)
	endif ()

    if (ACTIAS_COMPILER_MSVC)
        target_compile_options(${TARGET} PRIVATE /W4 /WX)
    else ()
        target_compile_options(${TARGET} PRIVATE -Wall -Wextra -Werror -fPIC)
    endif ()
endfunction()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

set_property(GLOBAL PROPERTY USE_FOLDERS ON)
